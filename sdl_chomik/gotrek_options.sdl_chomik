#!/usr/local/bin/sdl_chomik

variable current option number:integer;

variable possible choice option number (X:possible_decisions_range) of Gotrek:string;
let variable possible choice option number (X:possible_decisions_range) of Gotrek = value string " ";

variable possible choice coordinate number (X:possible_decisions_range) of Gotrek:integer;
let variable possible choice coordinate number 1 of Gotrek = value integer 50;
let variable possible choice coordinate number 2 of Gotrek = value integer 66;
let variable possible choice coordinate number 3 of Gotrek = value integer 82;
let variable possible choice coordinate number 4 of Gotrek = value integer 98;
let variable possible choice coordinate number 5 of Gotrek = value integer 114;


variable on Gotrek no_action (X:compare_result):code;
let variable on Gotrek no_action lower=value code {};
let variable on Gotrek no_action greater=value code {};
let variable on Gotrek no_action equal=value code 
{
    let variable possible choice option number <current option number> of Gotrek = value string "I will wait.";
};

variable on Gotrek goto current target (Y:compare_result):code;
let variable on Gotrek goto current target lower = value code {};
let variable on Gotrek goto current target greater = value code {};
let variable on Gotrek goto current target equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;
    
    let variable the print target stream index =  <my concatenating stream index>;
    let variable the print end of line = value string "";
    execute <print "I will go to" <current target> ".">;    
        
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";
    
    let variable the get from stream stream index = <my concatenating stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;
        
    execute <print "concatenation result" <the get from stream result>>;
};


variable on Gotrek attack current guest (Y:compare_result):code;
let variable on Gotrek attack current guest lower = value code {};
let variable on Gotrek attack current guest greater = value code {};
let variable on Gotrek attack current guest equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;
    
    let variable the print target stream index =  <the set to stream stream index>;
    let variable the print end of line = value string "";
    execute <print "I will attack" <from the Gotrek point of view who is <current guest>> ".">;    
        
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";

    let variable the get from stream stream index = <the set to stream stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;    
    
    #execute <print "concatenation result" <the get from stream result>>;
};

variable on Gotrek propose current guest to exchange weapons (Y:compare_result):code;
let variable on Gotrek propose current guest to exchange weapons lower = value code {};
let variable on Gotrek propose current guest to exchange weapons greater = value code {};
let variable on Gotrek propose current guest to exchange weapons equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;

    let variable the print target stream index =  <the set to stream stream index>;
    let variable the print end of line = value string "";
    execute <print "I will propose" <from the Gotrek point of view who is <current guest>> "to exchange weapons.">;    
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";

    let variable the get from stream stream index = <the set to stream stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;    
    
    #execute <print "concatenation result" <the get from stream result>>;
};


variable on Gotrek accept current guest proposal to exchange weapons (X:compare_result):code;
let on Gotrek accept current guest proposal to exchange weapons lower = value code {};
let on Gotrek accept current guest proposal to exchange weapons greater = value code {};
let on Gotrek accept current guest proposal to exchange weapons equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;

    let variable the print target stream index =  <the set to stream stream index>;
    let variable the print end of line = value string "";
    execute <print "I will accept" <from the Gotrek point of view who is <current guest>> "'s proposal to exchange weapons.">;    
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";

    let variable the get from stream stream index = <the set to stream stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;    
    
};



variable on Gotrek tell current guest that current information (Y:compare_result):code;
let variable on Gotrek tell current guest that current information lower = value code {};
let variable on Gotrek tell current guest that current information greater = value code {};
let variable on Gotrek tell current guest that current information equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;

    let variable the print target stream index =  <the set to stream stream index>;
    let variable the print end of line = value string "";
    execute <print "I will tell" <from the Gotrek point of view who is <current guest>> "that" <current information> ".">;    
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";

    let variable the get from stream stream index = <the set to stream stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;    
    
    #execute <print "concatenation result" <the get from stream result>>;
};

variable on Gotrek ask current guest to current action (Y:compare_result):code;
let variable on Gotrek ask current guest to current action lower = value code {};
let variable on Gotrek ask current guest to current action greater = value code {};
let variable on Gotrek ask current guest to current action equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;

    let variable the print target stream index =  <the set to stream stream index>;
    let variable the print end of line = value string "";
    execute <print "I will ask" <from the Gotrek point of view who is <current guest>> "to" <current action> ".">;    
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";

    let variable the get from stream stream index = <the set to stream stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;        
};


variable on Gotrek ask current guest what is his function (Y:compare_result):code;
let variable on Gotrek ask current guest what is his function lower = value code {};
let variable on Gotrek ask current guest what is his function greater = value code {};
let variable on Gotrek ask current guest what is his function equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;

    let variable the print target stream index =  <the set to stream stream index>;
    let variable the print end of line = value string "";
    execute <print "I will ask" <from the Gotrek point of view who is <current guest>> 
        <from the Gotrek point of view how to say what <current guest> function is> ".">;    
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";

    let variable the get from stream stream index = <the set to stream stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;    
    
    #execute <print "concatenation result" <the get from stream result>>;
};

variable on Gotrek ask current guest what is his weapon (Y:compare_result):code;
let variable on Gotrek ask current guest what is his weapon lower = value code {};
let variable on Gotrek ask current guest what is his weapon greater = value code {};
let variable on Gotrek ask current guest what is his weapon equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;

    let variable the print target stream index =  <the set to stream stream index>;
    let variable the print end of line = value string "";
    execute <print "I will ask" <from the Gotrek point of view who is <current guest>> 
        <from the Gotrek point of view how to say what <current guest> weapon is> ".">;    
        
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";

    let variable the get from stream stream index = <the set to stream stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;    
    
    #execute <print "concatenation result" <the get from stream result>>;
};


variable on Gotrek ask current guest whether he is a liar (Y:compare_result):code;
let variable on Gotrek ask current guest whether he is a liar lower = value code {};
let variable on Gotrek ask current guest whether he is a liar greater = value code {};
let variable on Gotrek ask current guest whether he is a liar equal = value code 
{
    let variable the set to stream stream index = <my concatenating stream index>;
    execute <set to stream "">;

    let variable the print target stream index =  <the set to stream stream index>;
    let variable the print end of line = value string "";
    execute <print "I will ask" <from the Gotrek point of view who is <current guest>> 
        <from the Gotrek point of view how to say whether <current guest> is a liar> ".">;    
        
    let variable the print target stream index = value integer 0;    # standard output
    let variable the print end of line = value string "\n";

    let variable the get from stream stream index = <the set to stream stream index>;
    execute <get from stream>;
    let variable possible choice option number <current option number> of Gotrek = <the get from stream result>;    
    
    #execute <print "concatenation result" <the get from stream result>>;
};



variable check if Gotrek is going to go to (X:place):code;
let variable check if Gotrek is going to go to (X:place) = value code
{
    let variable current target = value place [(X:place)];
    let variable current pattern = value action goto <current target>;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek goto current target <the compare result>>;
};

variable check if Gotrek is going to attack (X:person):code;
let variable check if Gotrek is going to attack (X:person)=value code
{
    let variable current guest = value place [(X:person)];
    let variable current pattern = value action attack <current guest>;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek attack current guest <the compare result>>;
};

variable check if Gotrek is going to propose (A:person) to exchange weapons:code;
let variable check if Gotrek is going to propose (A:person) to exchange weapons=value code
{
    let variable current guest = value place [(A:person)];
    let variable current pattern = value action propose <current guest> to exchange weapons;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek propose current guest to exchange weapons <the compare result>>;
};

variable check if Gotrek is going to accept (A:person) proposal to exchange weapons:code;
let check if Gotrek is going to accept (A:person) proposal to exchange weapons=value code
{
    let variable current guest = value place [(A:person)];
    let variable current pattern = value action accept <current guest> proposal to exchange weapons;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek accept current guest proposal to exchange weapons <the compare result>>;
};



variable check if Gotrek is going to tell (A:person) that (B:information):code;
let variable check if Gotrek is going to tell (A:person) that (B:information)=value code
{
    let variable current guest = value place [(A:person)];
    let variable current information = value information [(B:information)];
    let variable current pattern = value action tell <current guest> that <current information>;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek tell current guest that current information <the compare result>>;    
};

variable check if Gotrek is going to ask (A:person) to (B:action):code;
let variable check if Gotrek is going to ask (A:person) to (B:action)=value code
{
    let variable current guest = value place [(A:person)];
    let variable current action = value information [(B:action)];
    let variable current pattern = value action ask <current guest> to <current action>;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek ask current guest to current action <the compare result>>;    
};

variable check if Gotrek is going to ask (A:person) what his function is:code;
let variable check if Gotrek is going to ask (A:person) what his function is=value code
{
    let variable current guest = value place [(A:person)];
    let variable current pattern = value action ask <current guest> what is his function;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek ask current guest what is his function <the compare result>>;    
};

variable check if Gotrek is going to ask (A:person) what his weapon is:code;
let variable check if Gotrek is going to ask (A:person) what his weapon is=value code
{
    let variable current guest = value place [(A:person)];
    let variable current pattern = value action ask <current guest> what is his weapon;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek ask current guest what is his weapon <the compare result>>;
};

variable check if Gotrek is going to ask (A:person) whether he is a liar:code;
let variable check if Gotrek is going to ask (A:person) whether he is a liar=value code
{
    let variable current guest = value place [(A:person)];                    
    let variable current pattern = value action ask <current guest> whether he is a liar;
    execute <compare "action" <current possible decision> <current pattern>>;
    execute <on Gotrek ask current guest whether he is a liar <the compare result>>;
};

variable recalculate Gotrek choice option number (X:possible_decisions_range):code;
let variable recalculate Gotrek choice option number (X:possible_decisions_range)=value code
{
    let variable current option number = value integer [(X:possible_decisions_range)];
    let variable current possible decision = value action <Gotrek possible decision <current option number>>;
    
    execute <print "check how to translate Gotrek's decision" <current possible decision> "into text.">;    
    
    execute <compare "action" <current possible decision> no_action>;
    execute <on Gotrek no_action <the compare result>>;
    
    execute <check if Gotrek is going to go to (A:place)>;
    execute <check if Gotrek is going to attack (A:person)>;
    <check if Gotrek is going to propose (A:person) to exchange weapons>;
    <check if Gotrek is going to accept (A:person) proposal to exchange weapons>;
    execute <check if Gotrek is going to tell (A:person) that (B:information)>;
    execute <check if Gotrek is going to ask (A:person) to (B:action)>;
    execute <check if Gotrek is going to ask (A:person) what his function is>;
    execute <check if Gotrek is going to ask (A:person) what his weapon is>;
    execute <check if Gotrek is going to ask (A:person) whether he is a liar>;
};



variable recalculate Gotrek choice options:code;
let variable recalculate Gotrek choice options=value code
{
    execute <recalculate Gotrek choice option number (X:possible_decisions_range)>;
};
 
variable recalculate arrow coordinate:code;
let variable recalculate arrow coordinate = value code
{
    let variable arrow coordinate = <possible choice coordinate number <current option number> of Gotrek>;    
    
    execute <substract "integer" <arrow coordinate> 16>;
    let variable arrow coordinate = <the substract result "integer">;
};
