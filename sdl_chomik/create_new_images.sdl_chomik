#!/usr/local/bin/sdl_chomik


execute <create new image "../image/title.png">;
variable title image index: integer;
let variable title image index = <the created image index>;

execute <create new image "../image/background.png">;
variable background image index: integer;
let variable background image index = <the created image index>;

execute <create new image "../image/chomik.png">;
variable chomik image index: integer;
let variable chomik image index = <the created image index>;

execute <create new image "../image/frame.png">;
variable frame image index: integer;
let variable frame image index = <the created image index>;

execute <create new image "../image/options_frame.png">;
variable options frame image index: integer;
let variable options frame image index = <the created image index>;


execute <create new image "../image/small_frame.png">;
variable small frame image index: integer;
let variable small frame image index = <the created image index>;


execute <create new image "../image/arrow.png">;
variable arrow image index: integer;
let variable arrow image index = <the created image index>;

execute <create new image "../image/map.png">;
variable map image index: integer;
let variable map image index = <the created image index>;

<create new image "../image/notifications_window.png">;
variable notifications window image index: integer;
let notifications window image index = <the created image index>;



variable Gotrek animated image index (X:integer): integer;

variable map Gotrek animated image index to image index (X:Gotrek_animation_range):integer;


variable stop iteration if (X:compare_result):code;
let stop iteration if equal=value code
{
    let the break flag=value boolean true;
};
let stop iteration if lower=value code {};
let stop iteration if greater=value code 
{
    let the break flag=value boolean true;
};



let load Gotrek animation images (X:integer)=value code
{
    let image index = value integer [(X:integer)];
    let image number = <image index>;
        
    <add "integer" <image index> 10>;
    let image index = <the add result "integer">;

    let the set to stream stream index=<my output stringstream index>;
    <set to stream "">;
    
    let the print target stream index = <my output stringstream index>;
    let the print end of line = value string "";
    let the print separator = value string "";
    <print "../image/animation/gotrek/" <current weapon name> "/00" <image index> ".png">;
        
    let the print target stream index = value integer 0; # standard output
    let the print end of line = value string "\n";
    let the print separator = value string " ";
    
    let the get from stream stream index = <my output stringstream index>;
    <get from stream>;
    
    <create new image <the get from stream result>>;
    let map Gotrek animated image index to image index <current weapon> <image number> = <the created image index>;
        
    <compare "integer" <image index> 50>;
    <stop iteration if <the compare result>>;
};

let current weapon = value weapon axe;
let current weapon name = value string "axe";
<load Gotrek animation images (X:integer)>;
let the break flag=value boolean false;

let current weapon = value weapon hammer;
let current weapon name = value string "hammer";
<load Gotrek animation images (X:integer)>;
let the break flag=value boolean false;

let current weapon = value weapon sword;
let current weapon name = value string "sword";
<load Gotrek animation images (X:integer)>;
let the break flag=value boolean false;


