#!/usr/local/bin/chomik

variable update the relationship between persons (X:person) (Y:person):code;

let variable update the relationship between persons (X:person) (Y:person) = value code
{
    let variable current person= value person [(X:person)];
    let variable current guest = value person [(Y:person)];
    
    let the print end of line=value string "\n";
    <print "updating the relationship" <current person> "(" <location of <current guest>> ") with" <current person> "(" <location of <current guest>> ")">;
    
    
    execute <compare "person" <current person> <current guest>>;
    execute <everyone can see himself <current person> <the compare result>>;        
    
    execute <compare "place" <location of <current person>> <location of <current guest>>>;
    execute <everyone can see all the others being in the same city <the compare result>>;
    
    
    execute <print "relationship" <current person> <current guest>>;
    execute <print <current person> "can see" <current guest> "=" <<current person> can see <current guest>>>;
    execute <print <current person> "can hear" <current guest> "=" <<current person> can hear <current guest>>>;
    
};


variable if the current person function is current function then remember that he has been it (C:compare_result):code;
let if the current person function is current function then remember that he has been it lower = value code {};
let if the current person function is current function then remember that he has been it greater = value code {};
let if the current person function is current function then remember that he has been it equal = value code 
{
    let <current person> has been a <current function> = value boolean true;
    <print <current person> "has been a" <current function> "=" <<current person> has been a <current function>>>;
};

 
variable update the relationship between persons and functions (A:person) (F:function):code;
let update the relationship between persons and functions (A:person) (F:function)=value code
{
    let current person = value person [(A:person)];
    let current function = value function [(F:function)];
    
    <compare "function" <current function> <function of <current person>>>;
    <if the current person function is current function then remember that he has been it <the compare result>>;
};
