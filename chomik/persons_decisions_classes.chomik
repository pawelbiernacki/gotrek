#!/usr/local/bin/chomik

#
# Here we have "generate possible decisions ..." codes.
#


variable move to next current target on (X:compare_result):code;
let variable move to next current target on lower = value code {};
let variable move to next current target on greater = value code {};
let variable move to next current target on equal = value code 
{
    let variable current target = <<current target> successor>;
    #execute <print "we move to" <current target>>;
};


variable move to next current guest on (X:compare_result):code;
let variable move to next current guest on lower = value code {};
let variable move to next current guest on greater = value code {};
let variable move to next current guest on equal = value code 
{
    let variable current guest = <<current guest> successor>;
};


variable iterate through all the places until you find a connected one (I:places_range):code;

let variable iterate through all the places until you find a connected one (I:places_range)=value code
{
    <print "compare boolean 9">;
    <compare "boolean" <<current target> is connected with the current place> false>;
    <move to next current target on <the compare result>>;
};


variable iterate through all the persons until you find a seen one (I:persons_range):code;

let iterate through all the persons until you find a seen one (I:persons_range)=value code
{
    <print "compare boolean 10">;
    <compare "boolean" <<current guest> is seen by the current person> false>;
    <move to next current guest on <the compare result>>;
};



variable generate possible decisions for the current person and action class (X:action_class):code;

#
# This code assigns to the appropriate possible decision a "no_action" action (i.e. "wait").
#
let variable generate possible decisions for the current person and action class actions that do not depend on anything=value code
{
    let variable <current person> possible decision <current possible decision index> = value action no_action;
};


#
# This code assigns to the appropriate possible decision a "goto X" action (for X being a random place connected to the current place).
#
let variable generate possible decisions for the current person and action class actions that depend on a place=value code
{    
    #execute <print "find all connected places to" <current place>>;
    
    let variable (X:place) is connected with the current place=<(X:place) is connected with <current place>>;    
    #execute <print "from" <current place> "one can go to" (X:place) <(X:place) is connected with the current place>>;

    # begin from a randomly chosen place
    let variable the read from stream source stream index = <my place generator index>;
    execute <read from stream "place">;
    let variable current target = <the read from stream result "place">;

    #execute <print "we begin from" <current target>>;
    execute <iterate through all the places until you find a connected one (ITERATION:places_range)>;
    execute <print "we go to" <current target>>;
    
    let variable <current person> possible decision <current possible decision index> = value action goto <current target>;
};



# The code family:
#
# generate possible decisions for the current person and actions subclass given the information complexity (X:compare_result)
#
# is used to assign the current person possible decision depending on the information complexity.
#

variable generate possible decisions for the current person and actions subclass given the information complexity (X:compare_result):code;
let generate possible decisions for the current person and actions subclass given the information complexity lower = value code
{    
    let <current person> possible decision <current possible decision index> = value action tell <current guest> that <current information>;
};
let generate possible decisions for the current person and actions subclass given the information complexity equal = value code 
{
    let <current person> possible decision <current possible decision index> = value action no_action;
};
let generate possible decisions for the current person and actions subclass given the information complexity greater = value code 
{
    let <current person> possible decision <current possible decision index> = value action no_action;
};

# The code family:
#
# generate possible decisions for the current person and actions subclass given the action complexity (X:compare_result)
#
# is used to assign the current person possible decision depending on the action complexity
#
variable generate possible decisions for the current person and actions subclass given the action complexity (X:compare_result):code;
let generate possible decisions for the current person and actions subclass given the action complexity lower = value code
{
    let variable <current person> possible decision <current possible decision index> = value action ask <current guest> to <current action>;
};
let generate possible decisions for the current person and actions subclass given the action complexity equal = value code
{
    let variable <current person> possible decision <current possible decision index> = value action no_action;
};
let generate possible decisions for the current person and actions subclass given the action complexity greater = value code
{
    let variable <current person> possible decision <current possible decision index> = value action no_action;
};



variable (X:action_depending_on_person_proposals_subclass):code;
variable generate possible decisions for the current person and actions subclass for answers (X:action_depending_on_person_answers_subclass):code;
variable generate possible decisions for the current person and actions subclass for others (X:action_depending_on_person_others_subclass):code;

################################################
# 
# Here we define the subclass action_depending_on_person_proposals_subclass.

let generate possible decisions for the current person and actions subclass actions ask person to action=value code
{    
    let the read from stream source stream index = <my action generator index>;
    <read from stream "action">;    
    let current action = <the read from stream result "action">;
    
    # we have to exclude the actions that are too complex
    let current action complexity = <action complexity <current action>>;
    
    <compare "integer" <current action complexity> <max complexity>>;
    <generate possible decisions for the current person and actions subclass given the action complexity <compare result "integer">>;    
};

let generate possible decisions for the current person and actions subclass actions ask person what is someone function=value code
{
    let the read from stream source stream index = <my person generator index>;
    <read from stream "person">;
    
    let <current person> possible decision <current possible decision index> = value action ask <current guest> what is <the read from stream result "person"> function;
};

let generate possible decisions for the current person and actions subclass actions ask person what is someone weapon=value code
{
    let the read from stream source stream index = <my person generator index>;
    <read from stream "person">;
    
    let <current person> possible decision <current possible decision index> = value action ask <current guest> what is <the read from stream result "person"> weapon;
};
let generate possible decisions for the current person and actions subclass actions ask person whether someone is a liar=value code
{
    let the read from stream source stream index = <my person generator index>;
    <read from stream "person">;
    
    let <current person> possible decision <current possible decision index> = value action ask <current guest> whether <the read from stream result "person"> is a liar;
};
let generate possible decisions for the current person and actions subclass actions propose person to exchange weapons=value code
{
    let <current person> possible decision <current possible decision index> = value action propose <current guest> to exchange weapons;
};


################################################
# 
# Here we define the subclass action_depending_on_person_answers_subclass. 

let generate possible decisions for the current person and actions subclass actions answer person whether someone is a liar=value code
{
    let the read from stream source stream index = <my boolean generator index>;
    <read from stream "boolean">;

    let the read from stream source stream index = <my person generator index>;
    <read from stream "person">;
    
    let <current person> possible decision <current possible decision index> = value action answer <current guest> whether <the read from stream result "person"> is a liar is <the read from stream result "boolean">;
};


let generate possible decisions for the current person and actions subclass actions answer person what is someone weapon=value code
{
    let the read from stream source stream index = <my person generator index>;
    <read from stream "person">;

    let <current person> possible decision <current possible decision index> = value action answer <current guest> what is <the read from stream result "person"> weapon;
};

let generate possible decisions for the current person and actions subclass actions answer person what is someone function=value code
{
    let the read from stream source stream index = <my person generator index>;
    <read from stream "person">;

    let <current person> possible decision <current possible decision index> = value action answer <current guest> what is <the read from stream result "person"> function;
};


let generate possible decisions for the current person and actions subclass actions accept person proposal to do action=value code
{
    let the read from stream source stream index = <my action generator index>;
    <read from stream "action">;
    
    let <current person> possible decision <current possible decision index> = value action accept <current guest> proposal to do <the read from stream result "action">;
};


let generate possible decisions for the current person and actions subclass actions accept person proposal to exchange weapons=value code
{
    let <current person> possible decision <current possible decision index> = value action accept <current guest> proposal to exchange weapons;
};

let generate possible decisions for the current person and actions subclass actions refuse person proposal to do action=value code
{
    let the read from stream source stream index = <my action generator index>;
    <read from stream "action">;
    
    let <current person> possible decision <current possible decision index> = value action refuse <current guest> proposal to do <the read from stream result "action">;
};

let generate possible decisions for the current person and actions subclass actions refuse person question to reveal someone weapon=value code
{
    let the read from stream source stream index = <my person generator index>;
    <read from stream "person">;

    let <current person> possible decision <current possible decision index> = value action refuse <current guest> to reveal <the read from stream result "person"> weapon;
};

let generate possible decisions for the current person and actions subclass actions refuse person question to reveal someone function=value code
{
    let the read from stream source stream index = <my person generator index>;
    <read from stream "person">;

    let <current person> possible decision <current possible decision index> = value action refuse <current guest> to reveal <the read from stream result "person"> function;
};



################################################
# 
# Here we define the "generate possible decisions" for the subclasses values "actions attack person" and "actions tell person that information".

let variable generate possible decisions for the current person and actions subclass actions attack person=value code
{   
    let variable <current person> possible decision <current possible decision index> = value action attack <current guest>;
};

let variable generate possible decisions for the current person and actions subclass actions tell person that information=value code
{   
    # we have to exclude the informations that are too complex
    let current information complexity = <information complexity <current information>>;
    
    <print "current information complexity equals " <current information complexity>>;    
    
    <compare "integer" <current information complexity> <max complexity>>;
    <generate possible decisions for the current person and actions subclass given the information complexity <compare result "integer">>;    
};
