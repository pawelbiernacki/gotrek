#!/usr/local/bin/chomik

variable move to next current target on (X:compare_result):code;
let variable move to next current target on lower = value code {};
let variable move to next current target on greater = value code {};
let variable move to next current target on equal = value code 
{
    let variable current target = <<current target> successor>;
    #execute <print "we move to" <current target>>;
};


variable move to next current guest on (X:compare_result):code;
let variable move to next current guest on lower = value code {};
let variable move to next current guest on greater = value code {};
let variable move to next current guest on equal = value code 
{
    let variable current guest = <<current guest> successor>;
};


variable iterate through all the places until you find a connected one (I:places_range):code;

let variable iterate through all the places until you find a connected one (I:places_range)=value code
{
    execute <compare "boolean" <<current target> is connected with the current place> false>;
    execute <move to next current target on <the compare result>>;
};




variable iterate through all the persons until you find a seen one (I:persons_range):code;

let variable iterate through all the persons until you find a seen one (I:persons_range)=value code
{
    execute <compare "boolean" <<current guest> is seen by the current person> false>;
    execute <move to next current guest on <the compare result>>;
};



variable generate possible decisions for the current person and action class (X:action_class):code;
let variable generate possible decisions for the current person and action class actions that do not depend on anything=value code
{
    let variable <current person> possible decision <current possible decision index> = value action no_action;
};

let variable generate possible decisions for the current person and action class actions that depend on a place=value code
{    
    #execute <print "find all connected places to" <current place>>;
    
    let variable (X:place) is connected with the current place=<(X:place) is connected with <current place>>;    
    #execute <print "from" <current place> "one can go to" (X:place) <(X:place) is connected with the current place>>;

    # begin from a randomly chosen place
    let variable the read from stream source stream index = <my place generator index>;
    execute <read from stream "place">;
    let variable current target = <the read from stream result "place">;

    #execute <print "we begin from" <current target>>;
    execute <iterate through all the places until you find a connected one (ITERATION:places_range)>;
    execute <print "we go to" <current target>>;
    
    let variable <current person> possible decision <current possible decision index> = value action goto <current target>;
};



variable generate possible decisions for the current person and actions subclass (X:action_depending_on_person_subclass):code;

let variable generate possible decisions for the current person and actions subclass actions tell person that information=value code
{
    let variable the read from stream source stream index = <my information generator index>;
    execute <read from stream "information">;
    
    let variable <current person> possible decision <current possible decision index> = value action tell <current guest> that <the read from stream result "information">;
};
let variable generate possible decisions for the current person and actions subclass actions ask person to action=value code
{    
    let variable the read from stream source stream index = <my action generator index>;
    execute <read from stream "action">;    
    let variable <current person> possible decision <current possible decision index> = value action ask <current guest> to <the read from stream result "action">;
};
let variable generate possible decisions for the current person and actions subclass actions ask person what is his function=value code
{
    let variable <current person> possible decision <current possible decision index> = value action ask <current guest> what is his function;
};
let variable generate possible decisions for the current person and actions subclass actions ask person what is his weapon=value code
{
    let variable <current person> possible decision <current possible decision index> = value action ask <current guest> what is his weapon;
};
let variable generate possible decisions for the current person and actions subclass actions ask person whether he is a liar=value code
{
    let variable <current person> possible decision <current possible decision index> = value action ask <current guest> whether he is a liar;
};
let variable generate possible decisions for the current person and actions subclass actions answer person whether I am a liar=value code
{
    let variable the read from stream source stream index = <my action generator index>;
    execute <read from stream "action">;
    let variable <current person> possible decision <current possible decision index> = value action answer <current guest> whether I am a liar <the read from stream result "boolean">;
};


let variable generate possible decisions for the current person and actions subclass actions attack person=value code
{   
    let variable <current person> possible decision <current possible decision index> = value action attack <current guest>;
};
let variable generate possible decisions for the current person and actions subclass actions propose person to exchange weapons=value code
{
    let variable <current person> possible decision <current possible decision index> = value action propose <current guest> to exchange weapons;
};

let generate possible decisions for the current person and actions subclass actions accept person proposal to exchange weapons=value code
{
    let variable <current person> possible decision <current possible decision index> = value action accept <current guest> proposal to exchange weapons;
};


let variable generate possible decisions for the current person and action class actions that depend on a person proposals=value code
{
    let variable <current person> possible decision <current possible decision index> = value action no_action;
    execute <print "find all present persons">;
    
    let variable (X:person) is seen by the current person=<<current person> can see (X:person)>;    

    execute <print <current person> "can see" (X:person) "=" <(X:person) is seen by the current person>>;
    
    # begin from a randomly chosen person
    let variable the read from stream source stream index = <my person generator index>;
    execute <read from stream "person">;
    let variable current guest = <the read from stream result "person">;    
    execute <iterate through all the persons until you find a seen one (ITERATION:persons_range)>;
    
    
    # choose randomly action_depending_on_person_proposals_subclass
    let variable the read from stream source stream index = <my action_depending_on_person_proposals_subclass generator index>;
    <read from stream "action_depending_on_person_proposals_subclass">;
    <print "selected subclass" <the read from stream result "action_depending_on_person_proposals_subclass">>;
    
    <generate possible decisions for the current person and actions subclass <the read from stream result "action_depending_on_person_proposals_subclass">>;
    
    <print "selected action for" <current person> "index" <current possible decision index> "is" <<current person> possible decision <current possible decision index>>>;
    
};


let variable generate possible decisions for the current person and action class actions that depend on a person answers=value code
{
    let variable <current person> possible decision <current possible decision index> = value action no_action;
    execute <print "find all present persons">;
    
    let variable (X:person) is seen by the current person=<<current person> can see (X:person)>;    

    execute <print <current person> "can see" (X:person) "=" <(X:person) is seen by the current person>>;
    
    # begin from a randomly chosen person
    let variable the read from stream source stream index = <my person generator index>;
    execute <read from stream "person">;
    let variable current guest = <the read from stream result "person">;    
    execute <iterate through all the persons until you find a seen one (ITERATION:persons_range)>;
    
    
    # choose randomly action_depending_on_person_answers_subclass
    let variable the read from stream source stream index = <my action_depending_on_person_answers_subclass generator index>;
    execute <read from stream "action_depending_on_person_answers_subclass">;
    execute <print "selected subclass" <the read from stream result "action_depending_on_person_answers_subclass">>;
    
    execute <generate possible decisions for the current person and actions subclass <the read from stream result "action_depending_on_person_answers_subclass">>;
    
    <print "selected action for" <current person> "index" <current possible decision index> "is" <<current person> possible decision <current possible decision index>>>;
    
};




let variable generate possible decisions for the current person and action class actions that depend on a person others=value code
{
    let variable <current person> possible decision <current possible decision index> = value action no_action;
    execute <print "find all present persons">;
    
    let variable (X:person) is seen by the current person=<<current person> can see (X:person)>;    

    execute <print <current person> "can see" (X:person) "=" <(X:person) is seen by the current person>>;
    
    # begin from a randomly chosen person
    let variable the read from stream source stream index = <my person generator index>;
    execute <read from stream "person">;
    let variable current guest = <the read from stream result "person">;    
    execute <iterate through all the persons until you find a seen one (ITERATION:persons_range)>;
    
    
    # choose randomly action_depending_on_person_others_subclass
    let variable the read from stream source stream index = <my action_depending_on_person_others_subclass generator index>;
    execute <read from stream "action_depending_on_person_others_subclass">;
    execute <print "selected subclass" <the read from stream result "action_depending_on_person_others_subclass">>;
    
    execute <generate possible decisions for the current person and actions subclass <the read from stream result "action_depending_on_person_others_subclass">>;
    
    <print "selected action for" <current person> "index" <current possible decision index> "is" <<current person> possible decision <current possible decision index>>>;
    
};


#
# This code has been introduced to narrow down some action classes.
#

variable remove answering from the current action class (X:action_class):code;
variable remove moving from the current action class (X:action_class):code;
variable remove proposals from the current action class (X:action_class):code;


let remove answering from the current action class (X:action_class)=value code {};
let remove moving from the current action class (X:action_class)=value code {};
let remove proposals from the current action class (X:action_class)=value code {};


let remove proposals from the current action class actions that depend on a person proposals=value code
{
    let current action class = value action_class actions that do not depend on anything;
};

let remove moving from the current action class actions that depend on a place=value code
{
    let current action class = value action_class actions that do not depend on anything;
};

let remove answering from the current action class actions that depend on a person answers=value code
{
    let current action class = value action_class actions that do not depend on anything;
};




variable modify the current action class depending on the game phase (X:game_phase_type):code;
let modify the current action class depending on the game phase asking phase=value code
{
    <remove answering from the current action class <current action class>>;
    <remove moving from the current action class <current action class>>;
};
let modify the current action class depending on the game phase answering phase=value code
{
    <remove moving from the current action class <current action class>>;
    <remove proposals from the current action class <current action class>>;
};

let modify the current action class depending on the game phase moving phase=value code
{
    <remove answering from the current action class <current action class>>;
    <remove proposals from the current action class <current action class>>;
};


variable generate possible decisions for the current person (X:possible_decisions_range):code;
let variable generate possible decisions for the current person (X:possible_decisions_range) = value code
{
    let variable current possible decision index = value integer [(X:possible_decisions_range)];

    let variable the read from stream source stream index = <my action_class generator index>;
    execute <read from stream "action_class">;
    
    let current action class = <the read from stream result "action_class">;    
    <modify the current action class depending on the game phase <game phase>>;    
    <print "current action class" <current action class>>;    
    
    
    <generate possible decisions for the current person and action class <current action class>>;
        
    <check whether <current person> possible decision <current possible decision index> is correct>;
            
    <print <current person> "possible decision" <current possible decision index> "=" 
        <<current person> possible decision <current possible decision index>>>;
};



variable generate (X:person) possible decisions:code;

let variable generate (X:person) possible decisions = value code
{
    let variable current person = value person [(X:person)];    
    let variable current place = <location of <current person>>;
    execute <generate possible decisions for the current person (R:possible_decisions_range)>;
};

 
