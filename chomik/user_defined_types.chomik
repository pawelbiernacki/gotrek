#!/usr/local/bin/chomik

#
# This script contains the heart of the game - the enumerations for all persons, places, functions, weapons AND informations + actions.
#


type person={Gotrek, Gwaigilion, Gerrudir, Pregor};
type place={Krakow, Warszawa, Wroclaw, Poznan, Gdansk};
type function={no_function,Czesnik, Krajczy, Skarbnik, Starosta, Kasztelan};
type weapon={no_weapon, sword, axe};


type information={  (X:person) is in (Y:place),                    
                    (X:person) has function (Y:function),
                    (X:person) has weapon (Y:weapon),                    
                    (X:person) can see (Y:person),                    
                    (X:person) is a liar,                    
                    (X:person) has told (Y:person) that (Z:information),
                    
                    (X:person) has asked (Y:person) to (Z:action),                    
                    (X:person) has asked (Y:person) what is (Z:person) function,                    
                    (X:person) has asked (Y:person) what is (Z:person) weapon,                    
                    (X:person) has asked (Y:person) whether (Z:person) is a liar,                    
                    (X:person) has proposed (Y:person) to exchange weapons,                  
                    
                    (X:person) has refused (Y:person) proposal to (PROPOSAL:action),
                    (X:person) has refused (Y:person) to reveal (Z:person) weapon,
                    (X:person) has refused (Y:person) to reveal (Z:person) function,                    
                    (X:person) has accepted (Y:person) proposal to (PROPOSAL:action),                    
                    (X:person) has accepted (Y:person) proposal to exchange weapons,                    
                    (X:person) has answered (Y:person) that (Z:information),                    
                    (X:person) thinks that (Y:information)};
                    
type action={no_action,                                             # does not depend on anything

            goto (X:place),                                         # depends on a place (that must be connected)
            tell (X:person) that (Y:information),                   # depends on a person (that must be present)
                        
            
            ask (X:person) to (Y:action),                           # depends on a person (that must be present)
            ask (X:person) what is (Y:person) function,    
            ask (X:person) what is (Y:person) weapon,
            ask (X:person) whether (Y:person) is a liar,
            propose (X:person) to exchange weapons,            
            
            answer (X:person) that (Y:person) is a liar is (ANSWER:boolean),
            answer (X:person) that (Y:person) weapon is (WEAPON:weapon) is (ANSWER:boolean),
            answer (X:person) that (Y:person) function is (FUNCTION:function) is (ANSWER:boolean),
            accept (X:person) proposal to (PROPOSAL:action),
            accept (X:person) proposal to exchange weapons,            
            
            refuse (X:person) proposal to (PROPOSAL:action),            
            refuse (X:person) to reveal (Y:person) weapon,
            refuse (X:person) to reveal (Y:person) function,
            refuse (X:person) to reveal whether (Y:person) is a liar,
            
            attack (X:person)
            };
            
type game_mode_type={title, game},
    game_phase_type={asking phase, answering phase, moving phase},
        possible_decisions_range=1..5,
        notification_texts_range=1..20,
        places_range=1..5,
        persons_range=1..4,
        Gotrek_animation_range=1..10;
        
        
type action_class={ actions that do not depend on anything, 
                    actions that depend on a place, 
                    actions that depend on a person proposals,
                    actions that depend on a person answers,
                    actions that depend on a person others};

                    
# Once we identified the random person present we can use this "subclass" to generate the actual actions.
# The term "subclass" has nothing to do with the "class" from the OOP. Instead, these enums identify
# certain subsets of the action set.

type action_depending_on_person_proposals_subclass={  
                                            actions ask person to action,
                                            actions ask person what is someone function,
                                            actions ask person what is someone weapon,
                                            actions ask person whether someone is a liar,
                                            actions propose person to exchange weapons,
                                            actions attack person,
                                            actions tell person that information
                                            },
    action_depending_on_person_answers_subclass={
                                            actions answer person whether someone is a liar,
                                            actions answer person what is someone weapon,
                                            actions answer person what is someone function,
                                            actions accept person proposal to do action,
                                            actions refuse person proposal to do action,
                                            actions refuse person question to reveal my weapon,
                                            actions refuse person question to reveal my function,
                                            actions accept person proposal to exchange weapons,
                                            actions attack person,
                                            actions tell person that information
                                            },
    action_depending_on_person_others_subclass={
                                            actions attack person,
                                            actions tell person that information
                                            };

type explanation_mode_type = { 
    normal explanation, 
    asking about being a liar explanation, 
    asking about weapon explanation,
    asking about function explanation,
    proposing weapon exchange to anybody explanation,
    proposing weapon exchange from anybody explanation,
    god mode explanation};                                            
                                                                                        
expand(2);

variable max complexity:integer;
let max complexity = value integer 2; # it should correspond with the expand() parameter, i.e. the recursion depth for the enum types


include "../chomik/successors.chomik"


variable not (X:boolean):boolean;
let not true=value boolean false;
let not false=value boolean true;



variable weapon bonus for (X:weapon):integer;
let weapon bonus for no_weapon=value integer 0;
let weapon bonus for axe=value integer 3;
let weapon bonus for sword=value integer 4; # sword is a little better than axe


# various mappings (enum to string)

variable from the computer talking to Gotrek point of view who is (X:person):string;
let from the computer talking to Gotrek point of view who is Gotrek=value string "yourself";

# hardcoded - this should be done with the generators
let from the computer talking to Gotrek point of view who is Gwaigilion=value string "Gwaigilion";
let from the computer talking to Gotrek point of view who is Gerrudir=value string "Gerrudir";
let from the computer talking to Gotrek point of view who is Pregor=value string "Pregor";

variable from the Gotrek point of view who is (X:person):string;
let from the Gotrek point of view who is Gotrek=value string "myself";

# hardcoded - this should be done with the generators
let from the Gotrek point of view who is Gwaigilion=value string "Gwaigilion";
let from the Gotrek point of view who is Gerrudir=value string "Gerrudir";
let from the Gotrek point of view who is Pregor=value string "Pregor";

variable from the Gotrek point of view how to say whether (X:person) is a liar:string;
let from the Gotrek point of view how to say whether (X:person) is a liar=value string "whether someone is a liar";
let from the Gotrek point of view how to say whether Gotrek is a liar=value string "whether I am a liar";

variable from the Gotrek point of view how to say that (X:person) is a liar:string;
let from the Gotrek point of view how to say that (X:person) is a liar=value string "that someone is a liar";
let from the Gotrek point of view how to say that Gotrek is a liar=value string "that I am a liar";

variable from the Gotrek point of view how to say that (X:person) is not a liar:string;
let from the Gotrek point of view how to say that (X:person) is not a liar=value string "that someone is not a liar";
let from the Gotrek point of view how to say that Gotrek is not a liar=value string "that I am not a liar";


variable from the Gotrek point of view how to say what (X:person) weapon is:string;
let from the Gotrek point of view how to say what (X:person) weapon is=value string "what someone weapon is";

# hardcoded - this should be done with the generators
let from the Gotrek point of view how to say what Gerrudir weapon is=value string "what Gerrudir's weapon is";
let from the Gotrek point of view how to say what Gwaigilion weapon is=value string "what Gwaigilion's weapon is";
let from the Gotrek point of view how to say what Pregor weapon is=value string "what Pregor's weapon is";

let from the Gotrek point of view how to say what Gotrek weapon is=value string "what my weapon is";

variable from the Gotrek point of view how to say what (X:person) function is:string;
let from the Gotrek point of view how to say what (X:person) function is=value string "what someone function is";

# hardcoded - this should be done with the generators
let from the Gotrek point of view how to say what Gerrudir function is=value string "what Gerrudir's function is";
let from the Gotrek point of view how to say what Gwaigilion function is=value string "what Gwaigilion's function is";
let from the Gotrek point of view how to say what Pregor function is=value string "what Pregor's function is";

let from the Gotrek point of view how to say what Gotrek function is=value string "what my function is";
